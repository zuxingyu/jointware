apiVersion: v1
kind: Template
message: Login on https://${TENANT_NAME}-admin.${WILDCARD_DOMAIN} as ${ADMIN_USERNAME}/${ADMIN_PASSWORD}
metadata:
  creationTimestamp: 2017-12-27T03:03:25Z
  name: system
  namespace: openshift
  resourceVersion: "904"
  selfLink: /oapi/v1/namespaces/openshift/templates/system
  uid: 815c4ab8-eab2-11e7-8531-0050569c0b78
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: system-storage
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 100Mi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: mysql-storage
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: system-redis-storage
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: backend-redis-storage
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-cron
  spec:
    replicas: 1
    selector:
      name: backend-cron
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: backend-cron
      spec:
        containers:
        - args:
          - backend-cron
          env:
          - name: CONFIG_REDIS_PROXY
            value: backend-redis:6379
          - name: CONFIG_QUEUES_MASTER_NAME
            value: backend-redis:6379/1
          - name: RACK_ENV
            value: production
          image: 3scale-amp20/backend:1.0-2
          imagePullPolicy: IfNotPresent
          name: backend-cron
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-redis
  spec:
    replicas: 1
    selector:
      name: backend-redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: backend-redis
      spec:
        containers:
        - image: ${REDIS_IMAGE}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: 6379
          name: backend-redis
          readinessProbe:
            exec:
              command:
              - container-entrypoint
              - bash
              - -c
              - redis-cli set liveness-probe "`date`" | grep OK
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: backend-redis-storage
          - mountPath: /etc/redis.conf
            name: redis-config
            subPath: redis.conf
        volumes:
        - name: backend-redis-storage
          persistentVolumeClaim:
            claimName: backend-redis-storage
        - configMap:
            items:
            - key: redis.conf
              path: redis.conf
            name: redis-config
          name: redis-config
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-listener
  spec:
    replicas: 1
    selector:
      name: backend-listener
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: backend-listener
      spec:
        containers:
        - args:
          - 3scale_backend
          - start
          - -e
          - production
          - -p
          - "3000"
          - -x
          - /dev/stdout
          env:
          - name: CONFIG_REDIS_PROXY
            value: backend-redis:6379
          - name: CONFIG_QUEUES_MASTER_NAME
            value: backend-redis:6379/1
          - name: RACK_ENV
            value: production
          - name: CONFIG_INTERNAL_API_USER
            value: ${SYSTEM_BACKEND_USERNAME}
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: ${SYSTEM_BACKEND_PASSWORD}
          image: 3scale-amp20/backend:1.0-2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            tcpSocket:
              port: 3000
          name: backend-listener
          ports:
          - containerPort: 3000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /status
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: backend-redis
  spec:
    ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: backend-redis
- apiVersion: v1
  kind: Service
  metadata:
    name: backend-listener
  spec:
    ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      name: backend-listener
- apiVersion: v1
  kind: Service
  metadata:
    name: system-provider
  spec:
    ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: provider
    selector:
      name: system-app
- apiVersion: v1
  kind: Service
  metadata:
    name: system-developer
  spec:
    ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: developer
    selector:
      name: system-app
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-worker
  spec:
    replicas: 1
    selector:
      name: backend-worker
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: backend-worker
      spec:
        containers:
        - args:
          - 3scale_backend_worker
          - run
          env:
          - name: CONFIG_REDIS_PROXY
            value: backend-redis:6379
          - name: CONFIG_QUEUES_MASTER_NAME
            value: backend-redis:6379/1
          - name: RACK_ENV
            value: production
          - name: CONFIG_EVENTS_HOOK
            value: http://system-provider:3000/master/events/import
          - name: CONFIG_EVENTS_HOOK_SHARED_SECRET
            value: ${SYSTEM_BACKEND_SHARED_SECRET}
          image: 3scale-amp20/backend:1.0-2
          imagePullPolicy: IfNotPresent
          name: backend-worker
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: system-mysql
  spec:
    ports:
    - name: system-mysql
      nodePort: 0
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: system-mysql
- apiVersion: v1
  kind: Service
  metadata:
    name: system-redis
  spec:
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: system-redis
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-redis
  spec:
    replicas: 1
    selector:
      name: system-redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: system-redis
      spec:
        containers:
        - args: null
          image: ${REDIS_IMAGE}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 5
            tcpSocket:
              port: 6379
          name: system-redis
          readinessProbe:
            exec:
              command:
              - container-entrypoint
              - bash
              - -c
              - redis-cli set liveness-probe "`date`" | grep OK
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: system-redis-storage
          - mountPath: /etc/redis.conf
            name: redis-config
            subPath: redis.conf
        volumes:
        - name: system-redis-storage
          persistentVolumeClaim:
            claimName: system-redis-storage
        - configMap:
            items:
            - key: redis.conf
              path: redis.conf
            name: redis-config
          name: redis-config
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: system-sphinx
  spec:
    ports:
    - name: sphinx
      port: 9306
      protocol: TCP
      targetPort: 9306
    selector:
      name: system-sphinx
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-sphinx
  spec:
    replicas: 1
    selector:
      name: system-sphinx
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: system-sphinx
      spec:
        containers:
        - args:
          - rake
          - openshift:thinking_sphinx:start
          env:
          - name: RAILS_ENV
            value: production
          - name: DATABASE_URL
            value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
          - name: THINKING_SPHINX_ADDRESS
            value: 0.0.0.0
          - name: THINKING_SPHINX_CONFIGURATION_FILE
            value: db/sphinx/production.conf
          - name: THINKING_SPHINX_PID_FILE
            value: db/sphinx/searchd.pid
          - name: DELTA_INDEX_INTERVAL
            value: "5"
          - name: FULL_REINDEX_INTERVAL
            value: "60"
          image: 3scale-amp20/system:1.0-2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            tcpSocket:
              port: 9306
          name: system-sphinx
          volumeMounts:
          - mountPath: /opt/system/db/sphinx
            name: system-sphinx-database
        volumes:
        - emptyDir: {}
          name: system-sphinx-database
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: system-memcache
  spec:
    ports:
    - name: memcache
      port: 11211
      protocol: TCP
      targetPort: 11211
    selector:
      name: system-memcache
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-memcache
  spec:
    replicas: 1
    selector:
      name: system-memcache
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: system-memcache
      spec:
        containers:
        - args: null
          command:
          - memcached
          - -m
          - "64"
          env: null
          image: 3scale-amp20/memcached:1.4.15-7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: 11211
          name: memcache
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - echo version | nc $HOSTNAME 11211 | grep VERSION
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
        ports:
        - containerPort: 6379
          protocol: TCP
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: system-route
    name: system-provider-admin-route
  spec:
    host: ${TENANT_NAME}-admin.${WILDCARD_DOMAIN}
    port:
      targetPort: http
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: system-provider
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: system-route
    name: backend-route
  spec:
    host: backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
    port:
      targetPort: http
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: backend-listener
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: system-route
    name: system-developer-route
  spec:
    host: ${TENANT_NAME}.${WILDCARD_DOMAIN}
    port:
      targetPort: http
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: system-developer
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: apicast-staging
  spec:
    replicas: 1
    selector:
      deploymentconfig: apicast-staging
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 1800
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: apicast-staging
      spec:
        containers:
        - env:
          - name: THREESCALE_PORTAL_ENDPOINT
            value: http://${APICAST_ACCESS_TOKEN}@system-provider:3000
          - name: APICAST_CONFIGURATION_LOADER
            value: lazy
          - name: APICAST_CONFIGURATION_CACHE
            value: "0"
          - name: THREESCALE_DEPLOYMENT_ENV
            value: sandbox
          - name: APICAST_MANAGEMENT_API
            value: ${APICAST_MANAGEMENT_API}
          - name: BACKEND_ENDPOINT_OVERRIDE
            value: http://backend-listener:3000
          - name: OPENSSL_VERIFY
            value: ${APICAST_OPENSSL_VERIFY}
          - name: APICAST_RESPONSE_CODES
            value: ${APICAST_RESPONSE_CODES}
          - name: REDIS_URL
            value: redis://system-redis:6379/2
          image: 3scale-amp20/apicast-gateway:1.0-3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /status/live
              port: 8090
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          name: apicast-staging
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8090
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /status/ready
              port: 8090
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: apicast-staging
  spec:
    ports:
    - name: gateway
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: management
      port: 8090
      protocol: TCP
      targetPort: 8090
    selector:
      deploymentconfig: apicast-staging
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: apicast-production
  spec:
    replicas: 1
    selector:
      deploymentconfig: apicast-production
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 1800
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: apicast-production
      spec:
        containers:
        - env:
          - name: THREESCALE_PORTAL_ENDPOINT
            value: http://${APICAST_ACCESS_TOKEN}@system-provider:3000
          - name: APICAST_CONFIGURATION_LOADER
            value: boot
          - name: APICAST_CONFIGURATION_CACHE
            value: "300"
          - name: THREESCALE_DEPLOYMENT_ENV
            value: production
          - name: APICAST_MANAGEMENT_API
            value: ${APICAST_MANAGEMENT_API}
          - name: BACKEND_ENDPOINT_OVERRIDE
            value: http://backend-listener:3000
          - name: OPENSSL_VERIFY
            value: ${APICAST_OPENSSL_VERIFY}
          - name: APICAST_RESPONSE_CODES
            value: ${APICAST_RESPONSE_CODES}
          - name: REDIS_URL
            value: redis://system-redis:6379/1
          image: 3scale-amp20/apicast-gateway:1.0-3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /status/live
              port: 8090
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          name: apicast-production
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8090
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /status/ready
              port: 8090
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: apicast-production
  spec:
    ports:
    - name: gateway
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: management
      port: 8090
      protocol: TCP
      targetPort: 8090
    selector:
      deploymentconfig: apicast-production
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: apicast-staging
    name: api-apicast-staging-route
  spec:
    host: api-${TENANT_NAME}-apicast-staging.${WILDCARD_DOMAIN}
    port:
      targetPort: gateway
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: apicast-staging
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: apicast-production
    name: api-apicast-production-route
  spec:
    host: api-${TENANT_NAME}-apicast-production.${WILDCARD_DOMAIN}
    port:
      targetPort: gateway
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: apicast-production
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-app
  spec:
    replicas: 1
    selector:
      name: system-app
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
            - bash
            - -c
            - bundle exec rake boot openshift:post_deploy
            containerName: system-provider
          failurePolicy: Abort
        pre:
          execNewPod:
            command:
            - bash
            - -c
            - bundle exec rake boot openshift:deploy
            containerName: system-provider
            env:
            - name: RAILS_ENV
              value: production
            - name: DATABASE_URL
              value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
            - name: FORCE_SSL
              value: "true"
            - name: THREESCALE_SUPERDOMAIN
              value: ${WILDCARD_DOMAIN}
            - name: TENANT_NAME
              value: ${TENANT_NAME}
            - name: APICAST_ACCESS_TOKEN
              value: ${APICAST_ACCESS_TOKEN}
            - name: ADMIN_ACCESS_TOKEN
              value: ${ADMIN_ACCESS_TOKEN}
            - name: PROVIDER_PLAN
              value: enterprise
            - name: USER_LOGIN
              value: ${ADMIN_USERNAME}
            - name: USER_PASSWORD
              value: ${ADMIN_PASSWORD}
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_LOG_LEVEL
              value: info
            - name: THINKING_SPHINX_ADDRESS
              value: system-sphinx
            - name: THINKING_SPHINX_PORT
              value: "9306"
            - name: THINKING_SPHINX_CONFIGURATION_FILE
              value: /tmp/sphinx.conf
            - name: EVENTS_SHARED_SECRET
              value: ${SYSTEM_BACKEND_SHARED_SECRET}
            - name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
              value: VERIFY_NONE
            - name: APICAST_BACKEND_ROOT_ENDPOINT
              value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
            - name: CONFIG_INTERNAL_API_USER
              value: ${SYSTEM_BACKEND_USERNAME}
            - name: CONFIG_INTERNAL_API_PASSWORD
              value: ${SYSTEM_BACKEND_PASSWORD}
            - name: SECRET_KEY_BASE
              value: ${SYSTEM_APP_SECRET_KEY_BASE}
            - name: AMP_RELEASE
              value: ${AMP_RELEASE}
            - name: SMTP_ADDRESS
              valueFrom:
                configMapKeyRef:
                  key: address
                  name: smtp
            - name: SMTP_USER_NAME
              valueFrom:
                configMapKeyRef:
                  key: username
                  name: smtp
            - name: SMTP_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: password
                  name: smtp
            - name: SMTP_DOMAIN
              valueFrom:
                configMapKeyRef:
                  key: domain
                  name: smtp
            - name: SMTP_PORT
              valueFrom:
                configMapKeyRef:
                  key: port
                  name: smtp
            - name: SMTP_AUTHENTICATION
              valueFrom:
                configMapKeyRef:
                  key: authentication
                  name: smtp
            - name: SMTP_OPENSSL_VERIFY_MODE
              valueFrom:
                configMapKeyRef:
                  key: openssl.verify.mode
                  name: smtp
            - name: BACKEND_ROUTE
              value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
            volumes:
            - system-storage
          failurePolicy: Retry
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: system-app
      spec:
        containers:
        - args: null
          command:
          - env
          - TENANT_MODE=provider
          - PORT=3000
          - container-entrypoint
          - bundle
          - exec
          - unicorn
          - -c
          - config/unicorn.rb
          env:
          - name: RAILS_ENV
            value: production
          - name: DATABASE_URL
            value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
          - name: FORCE_SSL
            value: "true"
          - name: THREESCALE_SUPERDOMAIN
            value: ${WILDCARD_DOMAIN}
          - name: TENANT_NAME
            value: ${TENANT_NAME}
          - name: APICAST_ACCESS_TOKEN
            value: ${APICAST_ACCESS_TOKEN}
          - name: ADMIN_ACCESS_TOKEN
            value: ${ADMIN_ACCESS_TOKEN}
          - name: PROVIDER_PLAN
            value: enterprise
          - name: USER_LOGIN
            value: ${ADMIN_USERNAME}
          - name: USER_PASSWORD
            value: ${ADMIN_PASSWORD}
          - name: RAILS_LOG_TO_STDOUT
            value: "true"
          - name: RAILS_LOG_LEVEL
            value: info
          - name: THINKING_SPHINX_ADDRESS
            value: system-sphinx
          - name: THINKING_SPHINX_PORT
            value: "9306"
          - name: THINKING_SPHINX_CONFIGURATION_FILE
            value: /tmp/sphinx.conf
          - name: EVENTS_SHARED_SECRET
            value: ${SYSTEM_BACKEND_SHARED_SECRET}
          - name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
            value: VERIFY_NONE
          - name: APICAST_BACKEND_ROOT_ENDPOINT
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          - name: CONFIG_INTERNAL_API_USER
            value: ${SYSTEM_BACKEND_USERNAME}
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: ${SYSTEM_BACKEND_PASSWORD}
          - name: SECRET_KEY_BASE
            value: ${SYSTEM_APP_SECRET_KEY_BASE}
          - name: AMP_RELEASE
            value: ${AMP_RELEASE}
          - name: SMTP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: address
                name: smtp
          - name: SMTP_USER_NAME
            valueFrom:
              configMapKeyRef:
                key: username
                name: smtp
          - name: SMTP_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: password
                name: smtp
          - name: SMTP_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: domain
                name: smtp
          - name: SMTP_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: smtp
          - name: SMTP_AUTHENTICATION
            valueFrom:
              configMapKeyRef:
                key: authentication
                name: smtp
          - name: SMTP_OPENSSL_VERIFY_MODE
            valueFrom:
              configMapKeyRef:
                key: openssl.verify.mode
                name: smtp
          - name: BACKEND_ROUTE
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          image: 3scale-amp20/system:1.0-2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 10
            tcpSocket:
              port: provider
            timeoutSeconds: 10
          name: system-provider
          ports:
          - containerPort: 3000
            name: provider
            protocol: TCP
          readinessProbe:
            httpGet:
              httpHeaders:
              - name: X-Forwarded-Proto
                value: https
              path: /check.txt
              port: provider
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /opt/system/public/system
            name: system-storage
        - args: null
          command:
          - env
          - TENANT_MODE=developer
          - PORT=3001
          - container-entrypoint
          - bundle
          - exec
          - unicorn
          - -c
          - config/unicorn.rb
          env:
          - name: RAILS_ENV
            value: production
          - name: DATABASE_URL
            value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
          - name: FORCE_SSL
            value: "true"
          - name: THREESCALE_SUPERDOMAIN
            value: ${WILDCARD_DOMAIN}
          - name: TENANT_NAME
            value: ${TENANT_NAME}
          - name: APICAST_ACCESS_TOKEN
            value: ${APICAST_ACCESS_TOKEN}
          - name: ADMIN_ACCESS_TOKEN
            value: ${ADMIN_ACCESS_TOKEN}
          - name: PROVIDER_PLAN
            value: enterprise
          - name: USER_LOGIN
            value: ${ADMIN_USERNAME}
          - name: USER_PASSWORD
            value: ${ADMIN_PASSWORD}
          - name: RAILS_LOG_TO_STDOUT
            value: "true"
          - name: RAILS_LOG_LEVEL
            value: info
          - name: THINKING_SPHINX_ADDRESS
            value: system-sphinx
          - name: THINKING_SPHINX_PORT
            value: "9306"
          - name: THINKING_SPHINX_CONFIGURATION_FILE
            value: /tmp/sphinx.conf
          - name: EVENTS_SHARED_SECRET
            value: ${SYSTEM_BACKEND_SHARED_SECRET}
          - name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
            value: VERIFY_NONE
          - name: APICAST_BACKEND_ROOT_ENDPOINT
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          - name: CONFIG_INTERNAL_API_USER
            value: ${SYSTEM_BACKEND_USERNAME}
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: ${SYSTEM_BACKEND_PASSWORD}
          - name: SECRET_KEY_BASE
            value: ${SYSTEM_APP_SECRET_KEY_BASE}
          - name: AMP_RELEASE
            value: ${AMP_RELEASE}
          - name: SMTP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: address
                name: smtp
          - name: SMTP_USER_NAME
            valueFrom:
              configMapKeyRef:
                key: username
                name: smtp
          - name: SMTP_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: password
                name: smtp
          - name: SMTP_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: domain
                name: smtp
          - name: SMTP_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: smtp
          - name: SMTP_AUTHENTICATION
            valueFrom:
              configMapKeyRef:
                key: authentication
                name: smtp
          - name: SMTP_OPENSSL_VERIFY_MODE
            valueFrom:
              configMapKeyRef:
                key: openssl.verify.mode
                name: smtp
          - name: BACKEND_ROUTE
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          image: 3scale-amp20/system:1.0-2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 10
            tcpSocket:
              port: developer
            timeoutSeconds: 10
          name: system-developer
          ports:
          - containerPort: 3001
            name: developer
            protocol: TCP
          readinessProbe:
            httpGet:
              httpHeaders:
              - name: X-Forwarded-Proto
                value: https
              path: /check.txt
              port: developer
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /opt/system/public/system
            name: system-storage
            readOnly: true
        volumes:
        - name: system-storage
          persistentVolumeClaim:
            claimName: system-storage
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-resque
  spec:
    replicas: 1
    selector:
      name: system-resque
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: system-resque
      spec:
        containers:
        - args:
          - rake
          - resque:work
          - QUEUE=*
          env:
          - name: RAILS_ENV
            value: production
          - name: DATABASE_URL
            value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
          - name: FORCE_SSL
            value: "true"
          - name: THREESCALE_SUPERDOMAIN
            value: ${WILDCARD_DOMAIN}
          - name: TENANT_NAME
            value: ${TENANT_NAME}
          - name: APICAST_ACCESS_TOKEN
            value: ${APICAST_ACCESS_TOKEN}
          - name: ADMIN_ACCESS_TOKEN
            value: ${ADMIN_ACCESS_TOKEN}
          - name: PROVIDER_PLAN
            value: enterprise
          - name: USER_LOGIN
            value: ${ADMIN_USERNAME}
          - name: USER_PASSWORD
            value: ${ADMIN_PASSWORD}
          - name: RAILS_LOG_TO_STDOUT
            value: "true"
          - name: RAILS_LOG_LEVEL
            value: info
          - name: THINKING_SPHINX_ADDRESS
            value: system-sphinx
          - name: THINKING_SPHINX_PORT
            value: "9306"
          - name: THINKING_SPHINX_CONFIGURATION_FILE
            value: /tmp/sphinx.conf
          - name: EVENTS_SHARED_SECRET
            value: ${SYSTEM_BACKEND_SHARED_SECRET}
          - name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
            value: VERIFY_NONE
          - name: APICAST_BACKEND_ROOT_ENDPOINT
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          - name: CONFIG_INTERNAL_API_USER
            value: ${SYSTEM_BACKEND_USERNAME}
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: ${SYSTEM_BACKEND_PASSWORD}
          - name: SECRET_KEY_BASE
            value: ${SYSTEM_APP_SECRET_KEY_BASE}
          - name: AMP_RELEASE
            value: ${AMP_RELEASE}
          - name: SMTP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: address
                name: smtp
          - name: SMTP_USER_NAME
            valueFrom:
              configMapKeyRef:
                key: username
                name: smtp
          - name: SMTP_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: password
                name: smtp
          - name: SMTP_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: domain
                name: smtp
          - name: SMTP_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: smtp
          - name: SMTP_AUTHENTICATION
            valueFrom:
              configMapKeyRef:
                key: authentication
                name: smtp
          - name: SMTP_OPENSSL_VERIFY_MODE
            valueFrom:
              configMapKeyRef:
                key: openssl.verify.mode
                name: smtp
          - name: BACKEND_ROUTE
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          image: 3scale-amp20/system:1.0-2
          imagePullPolicy: IfNotPresent
          name: system-resque
          volumeMounts:
          - mountPath: /opt/system/public/system
            name: system-storage
        - args:
          - rake
          - resque:scheduler
          - QUEUE=*
          env:
          - name: RAILS_ENV
            value: production
          - name: DATABASE_URL
            value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
          - name: FORCE_SSL
            value: "true"
          - name: THREESCALE_SUPERDOMAIN
            value: ${WILDCARD_DOMAIN}
          - name: TENANT_NAME
            value: ${TENANT_NAME}
          - name: APICAST_ACCESS_TOKEN
            value: ${APICAST_ACCESS_TOKEN}
          - name: ADMIN_ACCESS_TOKEN
            value: ${ADMIN_ACCESS_TOKEN}
          - name: PROVIDER_PLAN
            value: enterprise
          - name: USER_LOGIN
            value: ${ADMIN_USERNAME}
          - name: USER_PASSWORD
            value: ${ADMIN_PASSWORD}
          - name: RAILS_LOG_TO_STDOUT
            value: "true"
          - name: RAILS_LOG_LEVEL
            value: info
          - name: THINKING_SPHINX_ADDRESS
            value: system-sphinx
          - name: THINKING_SPHINX_PORT
            value: "9306"
          - name: THINKING_SPHINX_CONFIGURATION_FILE
            value: /tmp/sphinx.conf
          - name: EVENTS_SHARED_SECRET
            value: ${SYSTEM_BACKEND_SHARED_SECRET}
          - name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
            value: VERIFY_NONE
          - name: APICAST_BACKEND_ROOT_ENDPOINT
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          - name: CONFIG_INTERNAL_API_USER
            value: ${SYSTEM_BACKEND_USERNAME}
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: ${SYSTEM_BACKEND_PASSWORD}
          - name: SECRET_KEY_BASE
            value: ${SYSTEM_APP_SECRET_KEY_BASE}
          - name: AMP_RELEASE
            value: ${AMP_RELEASE}
          - name: SMTP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: address
                name: smtp
          - name: SMTP_USER_NAME
            valueFrom:
              configMapKeyRef:
                key: username
                name: smtp
          - name: SMTP_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: password
                name: smtp
          - name: SMTP_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: domain
                name: smtp
          - name: SMTP_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: smtp
          - name: SMTP_AUTHENTICATION
            valueFrom:
              configMapKeyRef:
                key: authentication
                name: smtp
          - name: SMTP_OPENSSL_VERIFY_MODE
            valueFrom:
              configMapKeyRef:
                key: openssl.verify.mode
                name: smtp
          - name: BACKEND_ROUTE
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          image: 3scale-amp20/system:1.0-2
          imagePullPolicy: IfNotPresent
          name: system-scheduler
        volumes:
        - name: system-storage
          persistentVolumeClaim:
            claimName: system-storage
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-sidekiq
  spec:
    replicas: 1
    selector:
      name: system-sidekiq
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          name: system-sidekiq
      spec:
        containers:
        - args:
          - rake
          - sidekiq:worker
          env:
          - name: RAILS_ENV
            value: production
          - name: DATABASE_URL
            value: mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}
          - name: FORCE_SSL
            value: "true"
          - name: THREESCALE_SUPERDOMAIN
            value: ${WILDCARD_DOMAIN}
          - name: TENANT_NAME
            value: ${TENANT_NAME}
          - name: APICAST_ACCESS_TOKEN
            value: ${APICAST_ACCESS_TOKEN}
          - name: ADMIN_ACCESS_TOKEN
            value: ${ADMIN_ACCESS_TOKEN}
          - name: PROVIDER_PLAN
            value: enterprise
          - name: USER_LOGIN
            value: ${ADMIN_USERNAME}
          - name: USER_PASSWORD
            value: ${ADMIN_PASSWORD}
          - name: RAILS_LOG_TO_STDOUT
            value: "true"
          - name: RAILS_LOG_LEVEL
            value: info
          - name: THINKING_SPHINX_ADDRESS
            value: system-sphinx
          - name: THINKING_SPHINX_PORT
            value: "9306"
          - name: THINKING_SPHINX_CONFIGURATION_FILE
            value: /tmp/sphinx.conf
          - name: EVENTS_SHARED_SECRET
            value: ${SYSTEM_BACKEND_SHARED_SECRET}
          - name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
            value: VERIFY_NONE
          - name: APICAST_BACKEND_ROOT_ENDPOINT
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          - name: CONFIG_INTERNAL_API_USER
            value: ${SYSTEM_BACKEND_USERNAME}
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: ${SYSTEM_BACKEND_PASSWORD}
          - name: SECRET_KEY_BASE
            value: ${SYSTEM_APP_SECRET_KEY_BASE}
          - name: AMP_RELEASE
            value: ${AMP_RELEASE}
          - name: SMTP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: address
                name: smtp
          - name: SMTP_USER_NAME
            valueFrom:
              configMapKeyRef:
                key: username
                name: smtp
          - name: SMTP_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: password
                name: smtp
          - name: SMTP_DOMAIN
            valueFrom:
              configMapKeyRef:
                key: domain
                name: smtp
          - name: SMTP_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: smtp
          - name: SMTP_AUTHENTICATION
            valueFrom:
              configMapKeyRef:
                key: authentication
                name: smtp
          - name: SMTP_OPENSSL_VERIFY_MODE
            valueFrom:
              configMapKeyRef:
                key: openssl.verify.mode
                name: smtp
          - name: BACKEND_ROUTE
            value: https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}
          image: 3scale-amp20/system:1.0-2
          imagePullPolicy: IfNotPresent
          name: system-sidekiq
          volumeMounts:
          - mountPath: /opt/system/public/system
            name: system-storage
        volumes:
        - name: system-storage
          persistentVolumeClaim:
            claimName: system-storage
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: system-mysql
  spec:
    replicas: 1
    selector:
      name: system-mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: system-mysql
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_ROOT_PASSWORD
            value: ${MYSQL_ROOT_PASSWORD}
          - name: MYSQL_LOWER_CASE_TABLE_NAMES
            value: "1"
          image: ${MYSQL_IMAGE}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            tcpSocket:
              port: 3306
          name: system-mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 1Gi
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: mysql-storage
        volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-storage
    triggers:
    - type: ConfigChange
- apiVersion: v1
  data:
    redis.conf: |
      protected-mode no

      port 6379

      timeout 0
      tcp-keepalive 300

      daemonize no
      supervised no

      loglevel notice

      databases 16

      save 900 1
      save 300 10
      save 60 10000

      stop-writes-on-bgsave-error yes

      rdbcompression yes
      rdbchecksum yes

      dbfilename dump.rdb

      slave-serve-stale-data yes
      slave-read-only yes

      repl-diskless-sync no
      repl-disable-tcp-nodelay no

      appendonly yes
      appendfilename "appendonly.aof"
      appendfsync everysec
      no-appendfsync-on-rewrite no
      auto-aof-rewrite-percentage 100
      auto-aof-rewrite-min-size 64mb
      aof-load-truncated yes

      lua-time-limit 5000

      activerehashing no

      aof-rewrite-incremental-fsync yes
      dir /var/lib/redis/data
  kind: ConfigMap
  metadata:
    name: redis-config
- apiVersion: v1
  data:
    address: ""
    authentication: ""
    domain: ""
    openssl.verify.mode: ""
    password: ""
    port: ""
    username: ""
  kind: ConfigMap
  metadata:
    name: smtp
parameters:
- description: AMP release tag.
  name: AMP_RELEASE
  required: true
  value: 2.0.0-CR2-redhat-1
- from: '[a-z0-9]{8}'
  generate: expression
  name: ADMIN_PASSWORD
  required: true
- name: ADMIN_USERNAME
  required: true
  value: admin
- description: Read Only Access Token that is APIcast going to use to download its
    configuration.
  from: '[a-z0-9]{8}'
  generate: expression
  name: APICAST_ACCESS_TOKEN
  required: true
- description: Admin Access Token with all scopes and write permissions for API access.
  from: '[a-z0-9]{16}'
  generate: expression
  name: ADMIN_ACCESS_TOKEN
- description: Root domain for the wildcard routes. Eg. example.com will generate
    3scale-admin.example.com.
  name: WILDCARD_DOMAIN
  required: true
- description: Tenant name under the root that Admin UI will be available with -admin
    suffix.
  name: TENANT_NAME
  required: true
  value: 3scale
- description: Username for MySQL user that will be used for accessing the database.
  displayName: MySQL User
  name: MYSQL_USER
  required: true
  value: mysql
- description: Password for the MySQL user.
  displayName: MySQL Password
  from: '[a-z0-9]{8}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: MYSQL_DATABASE
  required: true
  value: system
- description: Password for Root user.
  displayName: MySQL Root password.
  from: '[a-z0-9]{8}'
  generate: expression
  name: MYSQL_ROOT_PASSWORD
  required: true
- description: Internal 3scale API username for internal 3scale api auth.
  name: SYSTEM_BACKEND_USERNAME
  required: true
  value: 3scale_api_user
- description: Internal 3scale API password for internal 3scale api auth.
  from: '[a-z0-9]{8}'
  generate: expression
  name: SYSTEM_BACKEND_PASSWORD
  required: true
- description: Redis image to use
  name: REDIS_IMAGE
  required: true
  value: rhscl/redis-32-rhel7:3.2-5.7
- description: Mysql image to use
  name: MYSQL_IMAGE
  required: true
  value: rhscl/mysql-56-rhel7:5.6-13.14
- description: Shared secret to import events from backend to system.
  from: '[a-z0-9]{8}'
  generate: expression
  name: SYSTEM_BACKEND_SHARED_SECRET
  required: true
- description: System application secret key base
  from: '[a-f0-9]{128}'
  generate: expression
  name: SYSTEM_APP_SECRET_KEY_BASE
  required: true
- description: Scope of the APIcast Management API. Can be disabled, status or debug.
    At least status required for health checks.
  name: APICAST_MANAGEMENT_API
  value: status
- description: Turn on/off the OpenSSL peer verification when downloading the configuration.
    Can be set to true/false.
  name: APICAST_OPENSSL_VERIFY
  value: "false"
- description: Enable logging response codes in APIcast.
  name: APICAST_RESPONSE_CODES
  value: "true"
