apiVersion: v1
kind: Template
labels:
  template: amq62-ssl
  xpaas: 1.4.0
message: A new messaging service with SSL support has been created in your project.
  It will handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing
  the service is ${MQ_USERNAME}/${MQ_PASSWORD}. Please be sure to create the "amq-service-account"
  service account and a secret named "${AMQ_SECRET}" containing the trust store and
  key store files ("${AMQ_TRUSTSTORE}" and "${AMQ_KEYSTORE}") used for serving secure
  content.
metadata:
  annotations:
    description: Application template for JBoss A-MQ brokers. These can be deployed
      as standalone or in a mesh. This template supports SSL and requires usage of
      OpenShift secrets.
    iconClass: icon-jboss
    openshift.io/display-name: Red Hat JBoss A-MQ 6.2 (Ephemeral with SSL)
    tags: messaging,amq,jboss,xpaas
    version: 1.4.0
  creationTimestamp: 2017-12-27T03:03:28Z
  name: amq62-ssl
  namespace: openshift
  resourceVersion: "971"
  selfLink: /oapi/v1/namespaces/openshift/templates/amq62-ssl
  uid: 8332d325-eab2-11e7-8531-0050569c0b78
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's AMQP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-amqp
  spec:
    ports:
    - port: 5672
      targetPort: 5672
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's AMQP SSL port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-amqp-ssl
  spec:
    ports:
    - port: 5671
      targetPort: 5671
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's MQTT port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-mqtt
  spec:
    ports:
    - port: 1883
      targetPort: 1883
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's MQTT SSL port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-mqtt-ssl
  spec:
    ports:
    - port: 8883
      targetPort: 8883
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's STOMP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-stomp
  spec:
    ports:
    - port: 61613
      targetPort: 61613
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's STOMP SSL port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-stomp-ssl
  spec:
    ports:
    - port: 61612
      targetPort: 61612
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire (SSL) port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-tcp",
        "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp", "kind": "Service"},{"name":
        "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp",
        "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-amqp-ssl", "kind": "Service"},{"name":
        "${APPLICATION_NAME}-amq-mqtt-ssl", "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-stomp-ssl",
        "kind": "Service"}]'
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp-ssl
  spec:
    ports:
    - port: 61617
      targetPort: 61617
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${MQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${MQ_PASSWORD}
          - name: AMQ_TRANSPORTS
            value: ${MQ_PROTOCOL}
          - name: AMQ_QUEUES
            value: ${MQ_QUEUES}
          - name: AMQ_TOPICS
            value: ${MQ_TOPICS}
          - name: MQ_SERIALIZABLE_PACKAGES
            value: ${MQ_SERIALIZABLE_PACKAGES}
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: ${AMQ_MESH_DISCOVERY_TYPE}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}-amq-tcp
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
            value: /etc/amq-secret-volume
          - name: AMQ_TRUSTSTORE
            value: ${AMQ_TRUSTSTORE}
          - name: AMQ_TRUSTSTORE_PASSWORD
            value: ${AMQ_TRUSTSTORE_PASSWORD}
          - name: AMQ_KEYSTORE
            value: ${AMQ_KEYSTORE}
          - name: AMQ_KEYSTORE_PASSWORD
            value: ${AMQ_KEYSTORE_PASSWORD}
          - name: AMQ_STORAGE_USAGE_LIMIT
            value: ${AMQ_STORAGE_USAGE_LIMIT}
          image: jboss-amq-62
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-amq
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 5671
            name: amqp-ssl
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 8883
            name: mqtt-ssl
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61612
            name: stomp-ssl
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          - containerPort: 61617
            name: tcp-ssl
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
          volumeMounts:
          - mountPath: /etc/amq-secret-volume
            name: broker-secret-volume
            readOnly: true
        serviceAccountName: amq-service-account
        terminationGracePeriodSeconds: 60
        volumes:
        - name: broker-secret-volume
          secret:
            secretName: ${AMQ_SECRET}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-amq
        from:
          kind: ImageStreamTag
          name: jboss-amq-62:1.4
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: broker
- description: 'Protocols to configure, separated by commas. Allowed values are: `openwire`,
    `amqp`, `stomp` and `mqtt`. SSL variants of these protocols will be configured
    automaticaly.'
  displayName: A-MQ Protocols
  name: MQ_PROTOCOL
  value: openwire
- description: Queue names, separated by commas. These queues will be automatically
    created when the broker starts. If left empty, queues will be still created dynamically.
  displayName: Queues
  name: MQ_QUEUES
- description: Topic names, separated by commas. These topics will be automatically
    created when the broker starts. If left empty, topics will be still created dynamically.
  displayName: Topics
  name: MQ_TOPICS
- description: List of packages that are allowed to be serialized for use in ObjectMessage,
    separated by commas. If your app doesn't use ObjectMessages, leave this blank.
    This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
  displayName: A-MQ Serializable Packages
  name: MQ_SERIALIZABLE_PACKAGES
- description: User name for standard broker user. It is required for connecting to
    the broker. If left empty, it will be generated.
  displayName: A-MQ Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MQ_USERNAME
- description: Password for standard broker user. It is required for connecting to
    the broker. If left empty, it will be generated.
  displayName: A-MQ Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_PASSWORD
- description: Name of a secret containing SSL related files
  displayName: Secret Name
  name: AMQ_SECRET
  required: true
  value: amq-app-secret
- description: SSL trust store filename
  displayName: Trust Store Filename
  name: AMQ_TRUSTSTORE
  required: true
  value: broker.ts
- description: SSL trust store password
  displayName: Trust Store Password
  name: AMQ_TRUSTSTORE_PASSWORD
  required: true
- description: SSL key store filename
  displayName: A-MQ Keystore Filename
  name: AMQ_KEYSTORE
  required: true
  value: broker.ks
- description: Password for accessing SSL keystore
  displayName: A-MQ Keystore Password
  name: AMQ_KEYSTORE_PASSWORD
  required: true
- description: The discovery agent type to use for discovering mesh endpoints.  'dns'
    will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes
    REST API to resolve service endpoints.  If using 'kube' the service account for
    the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user
    view system:serviceaccount:<namespace>:default' where <namespace> is the project
    namespace.
  displayName: A-MQ Mesh Discovery Type
  name: AMQ_MESH_DISCOVERY_TYPE
  value: kube
- description: The A-MQ storage usage limit
  displayName: A-MQ Storage Limit
  name: AMQ_STORAGE_USAGE_LIMIT
  value: 100 gb
- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
