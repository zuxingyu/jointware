/**
 * Copyright (2018, ) Institute of Software, Chinese Academy of Sciences
 */
package com.github.isdream.chameleon.vm.aws;

import java.util.Set;

import org.junit.Assert;

import com.github.isdream.chameleon.FeaturesUtils;

import junit.framework.TestCase;

/**
 * @author wuheng@otcaix.iscas.ac.cn
 *
 * 2018年2月19日
 */
public class AmazonEC2KindsAnalyzerTest extends TestCase {

	Set<String> kinds = null;
	
	@Override
	protected void setUp() throws Exception {
		kinds = new AmazonEC2KindsAnalyzer().getKinds();
	}

	public void testFeaturesWithTrueResults() {
		Assert.assertEquals(kinds.contains("ModifySnapshotAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeSpotDatafeedSubscription"), true);
		Assert.assertEquals(kinds.contains("ModifyHosts"), true);
		Assert.assertEquals(kinds.contains("DescribeSnapshots"), true);
		Assert.assertEquals(kinds.contains("CreateNatGateway"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointConnections"), true);
		Assert.assertEquals(kinds.contains("ResetInstanceAttribute"), true);
		Assert.assertEquals(kinds.contains("PurchaseReservedInstancesOffering"), true);
		Assert.assertEquals(kinds.contains("ResetSnapshotAttribute"), true);
		Assert.assertEquals(kinds.contains("RevokeSecurityGroupEgress"), true);
		Assert.assertEquals(kinds.contains("DescribeSpotPriceHistory"), true);
		Assert.assertEquals(kinds.contains("CreateDefaultVpc"), true);
		Assert.assertEquals(kinds.contains("DescribeHosts"), true);
		Assert.assertEquals(kinds.contains("CreateVpcPeeringConnection"), true);
		Assert.assertEquals(kinds.contains("PurchaseScheduledInstances"), true);
		Assert.assertEquals(kinds.contains("CopyFpgaImage"), true);
		Assert.assertEquals(kinds.contains("DescribeIdentityIdFormat"), true);
		Assert.assertEquals(kinds.contains("DeleteFlowLogs"), true);
		Assert.assertEquals(kinds.contains("CreateDefaultSubnet"), true);
		Assert.assertEquals(kinds.contains("DescribeInstances"), true);
		Assert.assertEquals(kinds.contains("CreateReservedInstancesListing"), true);
		Assert.assertEquals(kinds.contains("DescribeSecurityGroupReferences"), true);
		Assert.assertEquals(kinds.contains("DescribeDhcpOptions"), true);
		Assert.assertEquals(kinds.contains("AttachVolume"), true);
		Assert.assertEquals(kinds.contains("CreateVpcEndpointServiceConfiguration"), true);
		Assert.assertEquals(kinds.contains("ModifyReservedInstances"), true);
		Assert.assertEquals(kinds.contains("AllocateHosts"), true);
		Assert.assertEquals(kinds.contains("DeleteNetworkInterface"), true);
		Assert.assertEquals(kinds.contains("GetConsoleScreenshot"), true);
		Assert.assertEquals(kinds.contains("AssignPrivateIpAddresses"), true);
		Assert.assertEquals(kinds.contains("DeleteSnapshot"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcPeeringConnectionOptions"), true);
		Assert.assertEquals(kinds.contains("DeleteSecurityGroup"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointServicePermissions"), true);
		Assert.assertEquals(kinds.contains("AllocateAddress"), true);
		Assert.assertEquals(kinds.contains("ResetFpgaImageAttribute"), true);
		Assert.assertEquals(kinds.contains("DeleteFpgaImage"), true);
		Assert.assertEquals(kinds.contains("DescribeVolumeAttribute"), true);
		Assert.assertEquals(kinds.contains("ConfirmProductInstance"), true);
		Assert.assertEquals(kinds.contains("DeleteInternetGateway"), true);
		Assert.assertEquals(kinds.contains("DescribeImportSnapshotTasks"), true);
		Assert.assertEquals(kinds.contains("DescribeInstanceCreditSpecifications"), true);
		Assert.assertEquals(kinds.contains("ReportInstanceStatus"), true);
		Assert.assertEquals(kinds.contains("RevokeSecurityGroupIngress"), true);
		Assert.assertEquals(kinds.contains("EnableVpcClassicLink"), true);
		Assert.assertEquals(kinds.contains("ModifyInstanceAttribute"), true);
		Assert.assertEquals(kinds.contains("DeleteVpnConnectionRoute"), true);
		Assert.assertEquals(kinds.contains("DescribeSecurityGroups"), true);
		Assert.assertEquals(kinds.contains("ModifySubnetAttribute"), true);
		Assert.assertEquals(kinds.contains("CancelSpotFleetRequests"), true);
		Assert.assertEquals(kinds.contains("DescribeIdFormat"), true);
		Assert.assertEquals(kinds.contains("GetPasswordData"), true);
		Assert.assertEquals(kinds.contains("DisableVpcClassicLink"), true);
		Assert.assertEquals(kinds.contains("ModifyVolumeAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeSubnets"), true);
		Assert.assertEquals(kinds.contains("CreateEgressOnlyInternetGateway"), true);
		Assert.assertEquals(kinds.contains("CreateDhcpOptions"), true);
		Assert.assertEquals(kinds.contains("DescribeFlowLogs"), true);
		Assert.assertEquals(kinds.contains("RunInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeFpgaImages"), true);
		Assert.assertEquals(kinds.contains("DeleteVpcEndpointConnectionNotifications"), true);
		Assert.assertEquals(kinds.contains("CreateLaunchTemplateVersion"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcPeeringConnections"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointServicePermissions"), true);
		Assert.assertEquals(kinds.contains("CancelSpotInstanceRequests"), true);
		Assert.assertEquals(kinds.contains("DescribeHostReservationOfferings"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointConnectionNotification"), true);
		Assert.assertEquals(kinds.contains("AssociateDhcpOptions"), true);
		Assert.assertEquals(kinds.contains("ReplaceNetworkAclEntry"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpoints"), true);
		Assert.assertEquals(kinds.contains("DescribeStaleSecurityGroups"), true);
		Assert.assertEquals(kinds.contains("CreateVpnConnectionRoute"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcClassicLinkDnsSupport"), true);
		Assert.assertEquals(kinds.contains("UpdateSecurityGroupRuleDescriptionsEgress"), true);
		Assert.assertEquals(kinds.contains("ModifyInstanceCreditSpecification"), true);
		Assert.assertEquals(kinds.contains("RunScheduledInstances"), true);
		Assert.assertEquals(kinds.contains("ReplaceRoute"), true);
		Assert.assertEquals(kinds.contains("DeleteNatGateway"), true);
		Assert.assertEquals(kinds.contains("DescribePlacementGroups"), true);
		Assert.assertEquals(kinds.contains("CreateSpotDatafeedSubscription"), true);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesOfferings"), true);
		Assert.assertEquals(kinds.contains("CancelBundleTask"), true);
		Assert.assertEquals(kinds.contains("DetachVpnGateway"), true);
		Assert.assertEquals(kinds.contains("DisableVpcClassicLinkDnsSupport"), true);
		Assert.assertEquals(kinds.contains("DescribeSpotFleetInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeFpgaImageAttribute"), true);
		Assert.assertEquals(kinds.contains("UpdateSecurityGroupRuleDescriptionsIngress"), true);
		Assert.assertEquals(kinds.contains("ReplaceIamInstanceProfileAssociation"), true);
		Assert.assertEquals(kinds.contains("RebootInstances"), true);
		Assert.assertEquals(kinds.contains("DisassociateIamInstanceProfile"), true);
		Assert.assertEquals(kinds.contains("DescribeAggregateIdFormat"), true);
		Assert.assertEquals(kinds.contains("DetachClassicLinkVpc"), true);
		Assert.assertEquals(kinds.contains("ModifyFpgaImageAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcs"), true);
		Assert.assertEquals(kinds.contains("GetReservedInstancesExchangeQuote"), true);
		Assert.assertEquals(kinds.contains("MoveAddressToVpc"), true);
		Assert.assertEquals(kinds.contains("DescribeAddresses"), true);
		Assert.assertEquals(kinds.contains("StartInstances"), true);
		Assert.assertEquals(kinds.contains("CreateSubnet"), true);
		Assert.assertEquals(kinds.contains("DisassociateAddress"), true);
		Assert.assertEquals(kinds.contains("DeleteLaunchTemplateVersions"), true);
		Assert.assertEquals(kinds.contains("RestoreAddressToClassic"), true);
		Assert.assertEquals(kinds.contains("AcceptVpcEndpointConnections"), true);
		Assert.assertEquals(kinds.contains("DescribeScheduledInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeIamInstanceProfileAssociations"), true);
		Assert.assertEquals(kinds.contains("ImportInstance"), true);
		Assert.assertEquals(kinds.contains("DeleteRoute"), true);
		Assert.assertEquals(kinds.contains("DescribeElasticGpus"), true);
		Assert.assertEquals(kinds.contains("BundleInstance"), true);
		Assert.assertEquals(kinds.contains("DeletePlacementGroup"), true);
		Assert.assertEquals(kinds.contains("DisassociateVpcCidrBlock"), true);
		Assert.assertEquals(kinds.contains("DisableVgwRoutePropagation"), true);
		Assert.assertEquals(kinds.contains("CreateNetworkAclEntry"), true);
		Assert.assertEquals(kinds.contains("AuthorizeSecurityGroupIngress"), true);
		Assert.assertEquals(kinds.contains("DeleteCustomerGateway"), true);
		Assert.assertEquals(kinds.contains("CreateFlowLogs"), true);
		Assert.assertEquals(kinds.contains("DescribeNetworkInterfaceAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeConversionTasks"), true);
		Assert.assertEquals(kinds.contains("DescribeCustomerGateways"), true);
		Assert.assertEquals(kinds.contains("DescribeSpotFleetRequests"), true);
		Assert.assertEquals(kinds.contains("ModifySpotFleetRequest"), true);
		Assert.assertEquals(kinds.contains("DescribeNetworkInterfacePermissions"), true);
		Assert.assertEquals(kinds.contains("DescribeVolumesModifications"), true);
		Assert.assertEquals(kinds.contains("DetachInternetGateway"), true);
		Assert.assertEquals(kinds.contains("DeleteVpc"), true);
		Assert.assertEquals(kinds.contains("RequestSpotFleet"), true);
		Assert.assertEquals(kinds.contains("StopInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeExportTasks"), true);
		Assert.assertEquals(kinds.contains("CreateRouteTable"), true);
		Assert.assertEquals(kinds.contains("AssociateAddress"), true);
		Assert.assertEquals(kinds.contains("CreateCustomerGateway"), true);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesListings"), true);
		Assert.assertEquals(kinds.contains("DescribeTags"), true);
		Assert.assertEquals(kinds.contains("DeleteEgressOnlyInternetGateway"), true);
		Assert.assertEquals(kinds.contains("DeleteDhcpOptions"), true);
		Assert.assertEquals(kinds.contains("DescribeImages"), true);
		Assert.assertEquals(kinds.contains("AuthorizeSecurityGroupEgress"), true);
		Assert.assertEquals(kinds.contains("ImportImage"), true);
		Assert.assertEquals(kinds.contains("RejectVpcEndpointConnections"), true);
		Assert.assertEquals(kinds.contains("DeleteVpcPeeringConnection"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointServiceConfiguration"), true);
		Assert.assertEquals(kinds.contains("ReleaseAddress"), true);
		Assert.assertEquals(kinds.contains("ResetNetworkInterfaceAttribute"), true);
		Assert.assertEquals(kinds.contains("CopyImage"), true);
		Assert.assertEquals(kinds.contains("CreateVpc"), true);
		Assert.assertEquals(kinds.contains("DescribeHostReservations"), true);
		Assert.assertEquals(kinds.contains("CreateTags"), true);
		Assert.assertEquals(kinds.contains("DeleteNetworkAcl"), true);
		Assert.assertEquals(kinds.contains("CreateSnapshot"), true);
		Assert.assertEquals(kinds.contains("ImportVolume"), true);
		Assert.assertEquals(kinds.contains("DeleteKeyPair"), true);
		Assert.assertEquals(kinds.contains("DescribeImageAttribute"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcTenancy"), true);
		Assert.assertEquals(kinds.contains("DeleteVpnGateway"), true);
		Assert.assertEquals(kinds.contains("UnassignPrivateIpAddresses"), true);
		Assert.assertEquals(kinds.contains("DescribeImportImageTasks"), true);
		Assert.assertEquals(kinds.contains("AssociateVpcCidrBlock"), true);
		Assert.assertEquals(kinds.contains("ImportKeyPair"), true);
		Assert.assertEquals(kinds.contains("AcceptVpcPeeringConnection"), true);
		Assert.assertEquals(kinds.contains("DeleteLaunchTemplate"), true);
		Assert.assertEquals(kinds.contains("DescribeVpnConnections"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpoint"), true);
		Assert.assertEquals(kinds.contains("CreateImage"), true);
		Assert.assertEquals(kinds.contains("CancelImportTask"), true);
		Assert.assertEquals(kinds.contains("CancelConversionTask"), true);
		Assert.assertEquals(kinds.contains("DescribeInstanceAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeSpotFleetRequestHistory"), true);
		Assert.assertEquals(kinds.contains("ModifyImageAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeInstanceStatus"), true);
		Assert.assertEquals(kinds.contains("CreateVpcEndpoint"), true);
		Assert.assertEquals(kinds.contains("DescribeNatGateways"), true);
		Assert.assertEquals(kinds.contains("ModifyVolume"), true);
		Assert.assertEquals(kinds.contains("AssociateIamInstanceProfile"), true);
		Assert.assertEquals(kinds.contains("ResetImageAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcAttribute"), true);
		Assert.assertEquals(kinds.contains("CreateVpnConnection"), true);
		Assert.assertEquals(kinds.contains("RejectVpcPeeringConnection"), true);
		Assert.assertEquals(kinds.contains("DescribeVolumes"), true);
		Assert.assertEquals(kinds.contains("DeleteVpnConnection"), true);
		Assert.assertEquals(kinds.contains("AttachVpnGateway"), true);
		Assert.assertEquals(kinds.contains("CreateSecurityGroup"), true);
		Assert.assertEquals(kinds.contains("DeleteTags"), true);
		Assert.assertEquals(kinds.contains("ReleaseHosts"), true);
		Assert.assertEquals(kinds.contains("CreateVolume"), true);
		Assert.assertEquals(kinds.contains("CreateLaunchTemplate"), true);
		Assert.assertEquals(kinds.contains("ModifyLaunchTemplate"), true);
		Assert.assertEquals(kinds.contains("ReplaceRouteTableAssociation"), true);
		Assert.assertEquals(kinds.contains("PurchaseHostReservation"), true);
		Assert.assertEquals(kinds.contains("CreateNetworkInterfacePermission"), true);
		Assert.assertEquals(kinds.contains("ModifyVpcAttribute"), true);
		Assert.assertEquals(kinds.contains("DeleteSpotDatafeedSubscription"), true);
		Assert.assertEquals(kinds.contains("CreateVpcEndpointConnectionNotification"), true);
		Assert.assertEquals(kinds.contains("DeleteSubnet"), true);
		Assert.assertEquals(kinds.contains("CopySnapshot"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointServiceConfigurations"), true);
		Assert.assertEquals(kinds.contains("DeleteVolume"), true);
		Assert.assertEquals(kinds.contains("DescribeReservedInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeLaunchTemplates"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointServices"), true);
		Assert.assertEquals(kinds.contains("TerminateInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeAvailabilityZones"), true);
		Assert.assertEquals(kinds.contains("DescribeNetworkAcls"), true);
		Assert.assertEquals(kinds.contains("DescribeAccountAttributes"), true);
		Assert.assertEquals(kinds.contains("CreateNetworkAcl"), true);
		Assert.assertEquals(kinds.contains("DescribePrincipalIdFormat"), true);
		Assert.assertEquals(kinds.contains("EnableVgwRoutePropagation"), true);
		Assert.assertEquals(kinds.contains("GetConsoleOutput"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointConnectionNotifications"), true);
		Assert.assertEquals(kinds.contains("DescribeRouteTables"), true);
		Assert.assertEquals(kinds.contains("CancelExportTask"), true);
		Assert.assertEquals(kinds.contains("DryRunSupported"), true);
		Assert.assertEquals(kinds.contains("DescribeKeyPairs"), true);
		Assert.assertEquals(kinds.contains("AcceptReservedInstancesExchangeQuote"), true);
		Assert.assertEquals(kinds.contains("AssociateRouteTable"), true);
		Assert.assertEquals(kinds.contains("UnmonitorInstances"), true);
		Assert.assertEquals(kinds.contains("CreateFpgaImage"), true);
		Assert.assertEquals(kinds.contains("DeleteNetworkAclEntry"), true);
		Assert.assertEquals(kinds.contains("AssignIpv6Addresses"), true);
		Assert.assertEquals(kinds.contains("CreatePlacementGroup"), true);
		Assert.assertEquals(kinds.contains("DeregisterImage"), true);
		Assert.assertEquals(kinds.contains("DeleteVpcEndpoints"), true);
		Assert.assertEquals(kinds.contains("UnassignIpv6Addresses"), true);
		Assert.assertEquals(kinds.contains("GetLaunchTemplateData"), true);
		Assert.assertEquals(kinds.contains("DescribeSpotInstanceRequests"), true);
		Assert.assertEquals(kinds.contains("AttachNetworkInterface"), true);
		Assert.assertEquals(kinds.contains("DeleteVpcEndpointServiceConfigurations"), true);
		Assert.assertEquals(kinds.contains("DescribeInternetGateways"), true);
		Assert.assertEquals(kinds.contains("CreateRoute"), true);
		Assert.assertEquals(kinds.contains("ModifyIdentityIdFormat"), true);
		Assert.assertEquals(kinds.contains("DescribeVolumeStatus"), true);
		Assert.assertEquals(kinds.contains("CreateInstanceExportTask"), true);
		Assert.assertEquals(kinds.contains("EnableVolumeIO"), true);
		Assert.assertEquals(kinds.contains("ModifyIdFormat"), true);
		Assert.assertEquals(kinds.contains("DeleteRouteTable"), true);
		Assert.assertEquals(kinds.contains("AttachInternetGateway"), true);
		Assert.assertEquals(kinds.contains("DescribePrefixLists"), true);
		Assert.assertEquals(kinds.contains("GetHostReservationPurchasePreview"), true);
		Assert.assertEquals(kinds.contains("CreateInternetGateway"), true);
		Assert.assertEquals(kinds.contains("RegisterImage"), true);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesModifications"), true);
		Assert.assertEquals(kinds.contains("ModifyInstancePlacement"), true);
		Assert.assertEquals(kinds.contains("AssociateSubnetCidrBlock"), true);
		Assert.assertEquals(kinds.contains("DescribeRegions"), true);
		Assert.assertEquals(kinds.contains("DescribeSnapshotAttribute"), true);
		Assert.assertEquals(kinds.contains("DescribeClassicLinkInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeMovingAddresses"), true);
		Assert.assertEquals(kinds.contains("DescribeBundleTasks"), true);
		Assert.assertEquals(kinds.contains("ImportSnapshot"), true);
		Assert.assertEquals(kinds.contains("DescribeScheduledInstanceAvailability"), true);
		Assert.assertEquals(kinds.contains("CreateNetworkInterface"), true);
		Assert.assertEquals(kinds.contains("DetachVolume"), true);
		Assert.assertEquals(kinds.contains("DescribeVpnGateways"), true);
		Assert.assertEquals(kinds.contains("DeleteNetworkInterfacePermission"), true);
		Assert.assertEquals(kinds.contains("EnableVpcClassicLinkDnsSupport"), true);
		Assert.assertEquals(kinds.contains("AmazonWebService"), true);
		Assert.assertEquals(kinds.contains("ReplaceNetworkAclAssociation"), true);
		Assert.assertEquals(kinds.contains("RequestSpotInstances"), true);
		Assert.assertEquals(kinds.contains("DescribeVpcClassicLink"), true);
		Assert.assertEquals(kinds.contains("DescribeNetworkInterfaces"), true);
		Assert.assertEquals(kinds.contains("DescribeLaunchTemplateVersions"), true);
		Assert.assertEquals(kinds.contains("DetachNetworkInterface"), true);
		Assert.assertEquals(kinds.contains("ModifyNetworkInterfaceAttribute"), true);
		Assert.assertEquals(kinds.contains("CreateKeyPair"), true);
		Assert.assertEquals(kinds.contains("DisassociateRouteTable"), true);
		Assert.assertEquals(kinds.contains("AttachClassicLinkVpc"), true);
		Assert.assertEquals(kinds.contains("DescribeEgressOnlyInternetGateways"), true);
		Assert.assertEquals(kinds.contains("CancelReservedInstancesListing"), true);
		Assert.assertEquals(kinds.contains("DisassociateSubnetCidrBlock"), true);
		Assert.assertEquals(kinds.contains("MonitorInstances"), true);
		Assert.assertEquals(kinds.contains("CreateVpnGateway"), true);
	}
	
	public void testFeaturesWithFalseResults() {
		Assert.assertEquals(kinds.contains("ModifySnapshotAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSpotDatafeedSubscriptionFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyHostsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSnapshotsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateNatGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointConnectionsFalse"), false);
		Assert.assertEquals(kinds.contains("ResetInstanceAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("PurchaseReservedInstancesOfferingFalse"), false);
		Assert.assertEquals(kinds.contains("ResetSnapshotAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("RevokeSecurityGroupEgressFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSpotPriceHistoryFalse"), false);
		Assert.assertEquals(kinds.contains("CreateDefaultVpcFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeHostsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpcPeeringConnectionFalse"), false);
		Assert.assertEquals(kinds.contains("PurchaseScheduledInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("CopyFpgaImageFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeIdentityIdFormatFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteFlowLogsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateDefaultSubnetFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("CreateReservedInstancesListingFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSecurityGroupReferencesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeDhcpOptionsFalse"), false);
		Assert.assertEquals(kinds.contains("AttachVolumeFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpcEndpointServiceConfigurationFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyReservedInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("AllocateHostsFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteNetworkInterfaceFalse"), false);
		Assert.assertEquals(kinds.contains("GetConsoleScreenshotFalse"), false);
		Assert.assertEquals(kinds.contains("AssignPrivateIpAddressesFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteSnapshotFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcPeeringConnectionOptionsFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteSecurityGroupFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointServicePermissionsFalse"), false);
		Assert.assertEquals(kinds.contains("AllocateAddressFalse"), false);
		Assert.assertEquals(kinds.contains("ResetFpgaImageAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteFpgaImageFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVolumeAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("ConfirmProductInstanceFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteInternetGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeImportSnapshotTasksFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeInstanceCreditSpecificationsFalse"), false);
		Assert.assertEquals(kinds.contains("ReportInstanceStatusFalse"), false);
		Assert.assertEquals(kinds.contains("RevokeSecurityGroupIngressFalse"), false);
		Assert.assertEquals(kinds.contains("EnableVpcClassicLinkFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyInstanceAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpnConnectionRouteFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSecurityGroupsFalse"), false);
		Assert.assertEquals(kinds.contains("ModifySubnetAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("CancelSpotFleetRequestsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeIdFormatFalse"), false);
		Assert.assertEquals(kinds.contains("GetPasswordDataFalse"), false);
		Assert.assertEquals(kinds.contains("DisableVpcClassicLinkFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVolumeAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSubnetsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateEgressOnlyInternetGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("CreateDhcpOptionsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeFlowLogsFalse"), false);
		Assert.assertEquals(kinds.contains("RunInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeFpgaImagesFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpcEndpointConnectionNotificationsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateLaunchTemplateVersionFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcPeeringConnectionsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointServicePermissionsFalse"), false);
		Assert.assertEquals(kinds.contains("CancelSpotInstanceRequestsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeHostReservationOfferingsFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointConnectionNotificationFalse"), false);
		Assert.assertEquals(kinds.contains("AssociateDhcpOptionsFalse"), false);
		Assert.assertEquals(kinds.contains("ReplaceNetworkAclEntryFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeStaleSecurityGroupsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpnConnectionRouteFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcClassicLinkDnsSupportFalse"), false);
		Assert.assertEquals(kinds.contains("UpdateSecurityGroupRuleDescriptionsEgressFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyInstanceCreditSpecificationFalse"), false);
		Assert.assertEquals(kinds.contains("RunScheduledInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("ReplaceRouteFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteNatGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DescribePlacementGroupsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateSpotDatafeedSubscriptionFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesOfferingsFalse"), false);
		Assert.assertEquals(kinds.contains("CancelBundleTaskFalse"), false);
		Assert.assertEquals(kinds.contains("DetachVpnGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DisableVpcClassicLinkDnsSupportFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSpotFleetInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeFpgaImageAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("UpdateSecurityGroupRuleDescriptionsIngressFalse"), false);
		Assert.assertEquals(kinds.contains("ReplaceIamInstanceProfileAssociationFalse"), false);
		Assert.assertEquals(kinds.contains("RebootInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DisassociateIamInstanceProfileFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeAggregateIdFormatFalse"), false);
		Assert.assertEquals(kinds.contains("DetachClassicLinkVpcFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyFpgaImageAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcsFalse"), false);
		Assert.assertEquals(kinds.contains("GetReservedInstancesExchangeQuoteFalse"), false);
		Assert.assertEquals(kinds.contains("MoveAddressToVpcFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeAddressesFalse"), false);
		Assert.assertEquals(kinds.contains("StartInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("CreateSubnetFalse"), false);
		Assert.assertEquals(kinds.contains("DisassociateAddressFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteLaunchTemplateVersionsFalse"), false);
		Assert.assertEquals(kinds.contains("RestoreAddressToClassicFalse"), false);
		Assert.assertEquals(kinds.contains("AcceptVpcEndpointConnectionsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeScheduledInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeIamInstanceProfileAssociationsFalse"), false);
		Assert.assertEquals(kinds.contains("ImportInstanceFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteRouteFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeElasticGpusFalse"), false);
		Assert.assertEquals(kinds.contains("BundleInstanceFalse"), false);
		Assert.assertEquals(kinds.contains("DeletePlacementGroupFalse"), false);
		Assert.assertEquals(kinds.contains("DisassociateVpcCidrBlockFalse"), false);
		Assert.assertEquals(kinds.contains("DisableVgwRoutePropagationFalse"), false);
		Assert.assertEquals(kinds.contains("CreateNetworkAclEntryFalse"), false);
		Assert.assertEquals(kinds.contains("AuthorizeSecurityGroupIngressFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteCustomerGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("CreateFlowLogsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeNetworkInterfaceAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeConversionTasksFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeCustomerGatewaysFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSpotFleetRequestsFalse"), false);
		Assert.assertEquals(kinds.contains("ModifySpotFleetRequestFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeNetworkInterfacePermissionsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVolumesModificationsFalse"), false);
		Assert.assertEquals(kinds.contains("DetachInternetGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpcFalse"), false);
		Assert.assertEquals(kinds.contains("RequestSpotFleetFalse"), false);
		Assert.assertEquals(kinds.contains("StopInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeExportTasksFalse"), false);
		Assert.assertEquals(kinds.contains("CreateRouteTableFalse"), false);
		Assert.assertEquals(kinds.contains("AssociateAddressFalse"), false);
		Assert.assertEquals(kinds.contains("CreateCustomerGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesListingsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeTagsFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteEgressOnlyInternetGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteDhcpOptionsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeImagesFalse"), false);
		Assert.assertEquals(kinds.contains("AuthorizeSecurityGroupEgressFalse"), false);
		Assert.assertEquals(kinds.contains("ImportImageFalse"), false);
		Assert.assertEquals(kinds.contains("RejectVpcEndpointConnectionsFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpcPeeringConnectionFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointServiceConfigurationFalse"), false);
		Assert.assertEquals(kinds.contains("ReleaseAddressFalse"), false);
		Assert.assertEquals(kinds.contains("ResetNetworkInterfaceAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("CopyImageFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpcFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeHostReservationsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateTagsFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteNetworkAclFalse"), false);
		Assert.assertEquals(kinds.contains("CreateSnapshotFalse"), false);
		Assert.assertEquals(kinds.contains("ImportVolumeFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteKeyPairFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeImageAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcTenancyFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpnGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("UnassignPrivateIpAddressesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeImportImageTasksFalse"), false);
		Assert.assertEquals(kinds.contains("AssociateVpcCidrBlockFalse"), false);
		Assert.assertEquals(kinds.contains("ImportKeyPairFalse"), false);
		Assert.assertEquals(kinds.contains("AcceptVpcPeeringConnectionFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteLaunchTemplateFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpnConnectionsFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcEndpointFalse"), false);
		Assert.assertEquals(kinds.contains("CreateImageFalse"), false);
		Assert.assertEquals(kinds.contains("CancelImportTaskFalse"), false);
		Assert.assertEquals(kinds.contains("CancelConversionTaskFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeInstanceAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSpotFleetRequestHistoryFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyImageAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeInstanceStatusFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpcEndpointFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeNatGatewaysFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVolumeFalse"), false);
		Assert.assertEquals(kinds.contains("AssociateIamInstanceProfileFalse"), false);
		Assert.assertEquals(kinds.contains("ResetImageAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpnConnectionFalse"), false);
		Assert.assertEquals(kinds.contains("RejectVpcPeeringConnectionFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVolumesFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpnConnectionFalse"), false);
		Assert.assertEquals(kinds.contains("AttachVpnGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("CreateSecurityGroupFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteTagsFalse"), false);
		Assert.assertEquals(kinds.contains("ReleaseHostsFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVolumeFalse"), false);
		Assert.assertEquals(kinds.contains("CreateLaunchTemplateFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyLaunchTemplateFalse"), false);
		Assert.assertEquals(kinds.contains("ReplaceRouteTableAssociationFalse"), false);
		Assert.assertEquals(kinds.contains("PurchaseHostReservationFalse"), false);
		Assert.assertEquals(kinds.contains("CreateNetworkInterfacePermissionFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyVpcAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteSpotDatafeedSubscriptionFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpcEndpointConnectionNotificationFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteSubnetFalse"), false);
		Assert.assertEquals(kinds.contains("CopySnapshotFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointServiceConfigurationsFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVolumeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeLaunchTemplatesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointServicesFalse"), false);
		Assert.assertEquals(kinds.contains("TerminateInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeAvailabilityZonesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeNetworkAclsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeAccountAttributesFalse"), false);
		Assert.assertEquals(kinds.contains("CreateNetworkAclFalse"), false);
		Assert.assertEquals(kinds.contains("DescribePrincipalIdFormatFalse"), false);
		Assert.assertEquals(kinds.contains("EnableVgwRoutePropagationFalse"), false);
		Assert.assertEquals(kinds.contains("GetConsoleOutputFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcEndpointConnectionNotificationsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeRouteTablesFalse"), false);
		Assert.assertEquals(kinds.contains("CancelExportTaskFalse"), false);
		Assert.assertEquals(kinds.contains("DryRunSupportedFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeKeyPairsFalse"), false);
		Assert.assertEquals(kinds.contains("AcceptReservedInstancesExchangeQuoteFalse"), false);
		Assert.assertEquals(kinds.contains("AssociateRouteTableFalse"), false);
		Assert.assertEquals(kinds.contains("UnmonitorInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("CreateFpgaImageFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteNetworkAclEntryFalse"), false);
		Assert.assertEquals(kinds.contains("AssignIpv6AddressesFalse"), false);
		Assert.assertEquals(kinds.contains("CreatePlacementGroupFalse"), false);
		Assert.assertEquals(kinds.contains("DeregisterImageFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpcEndpointsFalse"), false);
		Assert.assertEquals(kinds.contains("UnassignIpv6AddressesFalse"), false);
		Assert.assertEquals(kinds.contains("GetLaunchTemplateDataFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSpotInstanceRequestsFalse"), false);
		Assert.assertEquals(kinds.contains("AttachNetworkInterfaceFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteVpcEndpointServiceConfigurationsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeInternetGatewaysFalse"), false);
		Assert.assertEquals(kinds.contains("CreateRouteFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyIdentityIdFormatFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVolumeStatusFalse"), false);
		Assert.assertEquals(kinds.contains("CreateInstanceExportTaskFalse"), false);
		Assert.assertEquals(kinds.contains("EnableVolumeIOFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyIdFormatFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteRouteTableFalse"), false);
		Assert.assertEquals(kinds.contains("AttachInternetGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("DescribePrefixListsFalse"), false);
		Assert.assertEquals(kinds.contains("GetHostReservationPurchasePreviewFalse"), false);
		Assert.assertEquals(kinds.contains("CreateInternetGatewayFalse"), false);
		Assert.assertEquals(kinds.contains("RegisterImageFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeReservedInstancesModificationsFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyInstancePlacementFalse"), false);
		Assert.assertEquals(kinds.contains("AssociateSubnetCidrBlockFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeRegionsFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeSnapshotAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeClassicLinkInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeMovingAddressesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeBundleTasksFalse"), false);
		Assert.assertEquals(kinds.contains("ImportSnapshotFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeScheduledInstanceAvailabilityFalse"), false);
		Assert.assertEquals(kinds.contains("CreateNetworkInterfaceFalse"), false);
		Assert.assertEquals(kinds.contains("DetachVolumeFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpnGatewaysFalse"), false);
		Assert.assertEquals(kinds.contains("DeleteNetworkInterfacePermissionFalse"), false);
		Assert.assertEquals(kinds.contains("EnableVpcClassicLinkDnsSupportFalse"), false);
		Assert.assertEquals(kinds.contains("AmazonWebServiceFalse"), false);
		Assert.assertEquals(kinds.contains("ReplaceNetworkAclAssociationFalse"), false);
		Assert.assertEquals(kinds.contains("RequestSpotInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeVpcClassicLinkFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeNetworkInterfacesFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeLaunchTemplateVersionsFalse"), false);
		Assert.assertEquals(kinds.contains("DetachNetworkInterfaceFalse"), false);
		Assert.assertEquals(kinds.contains("ModifyNetworkInterfaceAttributeFalse"), false);
		Assert.assertEquals(kinds.contains("CreateKeyPairFalse"), false);
		Assert.assertEquals(kinds.contains("DisassociateRouteTableFalse"), false);
		Assert.assertEquals(kinds.contains("AttachClassicLinkVpcFalse"), false);
		Assert.assertEquals(kinds.contains("DescribeEgressOnlyInternetGatewaysFalse"), false);
		Assert.assertEquals(kinds.contains("CancelReservedInstancesListingFalse"), false);
		Assert.assertEquals(kinds.contains("DisassociateSubnetCidrBlockFalse"), false);
		Assert.assertEquals(kinds.contains("MonitorInstancesFalse"), false);
		Assert.assertEquals(kinds.contains("CreateVpnGatewayFalse"), false);
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AmazonEC2KindsAnalyzer ecs = new AmazonEC2KindsAnalyzer();
		FeaturesUtils.showAllFeatures("Amazon EC2", ecs.getKinds());
		FeaturesUtils.testFeaturesWithTrueResults(ecs.getKinds());
		FeaturesUtils.testFeaturesWithFalseResults(ecs.getKinds());
	}


}
