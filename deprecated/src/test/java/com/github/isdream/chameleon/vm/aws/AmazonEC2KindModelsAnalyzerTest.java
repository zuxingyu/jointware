/**
 * Copyright (2018, ) Institute of Software, Chinese Academy of Sciences
 */
package com.github.isdream.chameleon.vm.aws;

import java.util.Collection;
import java.util.Map;

import org.junit.Assert;

import com.github.isdream.chameleon.ModelsUtils;

import junit.framework.TestCase;

/**
 * @author wuheng@otcaix.iscas.ac.cn
 *
 * 2018年2月20日
 */
public class AmazonEC2KindModelsAnalyzerTest extends TestCase {

	Map<String, String> kindModels = null;
	
	@Override
	protected void setUp() throws Exception {
		kindModels = new AmazonEC2KindModelsAnalyzer().getKindModels();
	}

	public void testEuqalFeatures() {
		Assert.assertEquals(ModelsUtils.testGreatAndEuqalFeatures(
						new AmazonEC2KindsAnalyzer().getKinds(), 
						kindModels.keySet()), true);
	}
	
	public void testModelsWithTrueResults() {
		Collection<String> models = kindModels.values();
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifySnapshotAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotDatafeedSubscriptionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyHostsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSnapshotsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNatGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointConnectionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetInstanceAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.PurchaseReservedInstancesOfferingRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetSnapshotAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RevokeSecurityGroupEgressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotPriceHistoryRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcPeeringConnectionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeHostsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateDefaultVpcRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.PurchaseScheduledInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeIdentityIdFormatRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CopyFpgaImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteFlowLogsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateDefaultSubnetRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateReservedInstancesListingRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSecurityGroupReferencesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeDhcpOptionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachVolumeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcEndpointServiceConfigurationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyReservedInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AllocateHostsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkInterfaceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetConsoleScreenshotRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssignPrivateIpAddressesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSnapshotRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcPeeringConnectionOptionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSecurityGroupRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointServicePermissionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AllocateAddressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetFpgaImageAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteFpgaImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumeAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ConfirmProductInstanceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteInternetGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImportSnapshotTasksRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstanceCreditSpecificationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReportInstanceStatusRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RevokeSecurityGroupIngressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVpcClassicLinkRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpnConnectionRouteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifySubnetAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelSpotFleetRequestsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeIdFormatRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetPasswordDataRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisableVpcClassicLinkRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVolumeAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSubnetsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateEgressOnlyInternetGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeFlowLogsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateDhcpOptionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcEndpointConnectionNotificationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RunInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeFpgaImagesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateLaunchTemplateVersionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcPeeringConnectionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointServicePermissionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelSpotInstanceRequestsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeHostReservationOfferingsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointConnectionNotificationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateDhcpOptionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceNetworkAclEntryRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeStaleSecurityGroupsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpnConnectionRouteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcClassicLinkDnsSupportRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UpdateSecurityGroupRuleDescriptionsEgressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyInstanceCreditSpecificationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RunScheduledInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceRouteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNatGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribePlacementGroupsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSpotDatafeedSubscriptionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesOfferingsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachVpnGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelBundleTaskRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisableVpcClassicLinkDnsSupportRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotFleetInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeFpgaImageAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UpdateSecurityGroupRuleDescriptionsIngressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceIamInstanceProfileAssociationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RebootInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateIamInstanceProfileRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAggregateIdFormatRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachClassicLinkVpcRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyFpgaImageAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetReservedInstancesExchangeQuoteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.MoveAddressToVpcRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAddressesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.StartInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSubnetRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateAddressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteLaunchTemplateVersionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RestoreAddressToClassicRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AcceptVpcEndpointConnectionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeScheduledInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeIamInstanceProfileAssociationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportInstanceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteRouteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeElasticGpusRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.BundleInstanceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeletePlacementGroupRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateVpcCidrBlockRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisableVgwRoutePropagationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkAclEntryRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteCustomerGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AuthorizeSecurityGroupIngressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateFlowLogsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkInterfaceAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeConversionTasksRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeCustomerGatewaysRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotFleetRequestsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifySpotFleetRequestRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkInterfacePermissionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumesModificationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachInternetGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RequestSpotFleetRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.StopInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeExportTasksRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateRouteTableRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateAddressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesListingsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateCustomerGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeTagsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteEgressOnlyInternetGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteDhcpOptionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImagesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AuthorizeSecurityGroupEgressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RejectVpcEndpointConnectionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcPeeringConnectionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointServiceConfigurationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReleaseAddressRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetNetworkInterfaceAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CopyImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeHostReservationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkAclRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateTagsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSnapshotRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportVolumeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteKeyPairRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImageAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcTenancyRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpnGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UnassignPrivateIpAddressesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImportImageTasksRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateVpcCidrBlockRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportKeyPairRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AcceptVpcPeeringConnectionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteLaunchTemplateRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpnConnectionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelImportTaskRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstanceAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelConversionTaskRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotFleetRequestHistoryRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyImageAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstanceStatusRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcEndpointRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNatGatewaysRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVolumeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetImageAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateIamInstanceProfileRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpnConnectionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RejectVpcPeeringConnectionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpnConnectionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachVpnGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSecurityGroupRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteTagsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReleaseHostsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVolumeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateLaunchTemplateRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyLaunchTemplateRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceRouteTableAssociationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.PurchaseHostReservationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkInterfacePermissionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSpotDatafeedSubscriptionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcEndpointConnectionNotificationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSubnetRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CopySnapshotRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointServiceConfigurationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVolumeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeLaunchTemplatesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointServicesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.TerminateInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAvailabilityZonesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkAclsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAccountAttributesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribePrincipalIdFormatRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkAclRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVgwRoutePropagationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetConsoleOutputRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointConnectionNotificationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeRouteTablesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelExportTaskRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeKeyPairsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AcceptReservedInstancesExchangeQuoteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UnmonitorInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateRouteTableRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkAclEntryRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateFpgaImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssignIpv6AddressesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreatePlacementGroupRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeregisterImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcEndpointsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UnassignIpv6AddressesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetLaunchTemplateDataRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotInstanceRequestsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcEndpointServiceConfigurationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachNetworkInterfaceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInternetGatewaysRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateRouteRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyIdentityIdFormatRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumeStatusRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVolumeIORequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyIdFormatRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateInstanceExportTaskRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteRouteTableRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribePrefixListsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetHostReservationPurchasePreviewRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachInternetGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesModificationsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RegisterImageRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateInternetGatewayRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyInstancePlacementRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeRegionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSnapshotAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateSubnetCidrBlockRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeClassicLinkInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeMovingAddressesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeBundleTasksRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeScheduledInstanceAvailabilityRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportSnapshotRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkInterfaceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachVolumeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpnGatewaysRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkInterfacePermissionRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVpcClassicLinkDnsSupportRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceNetworkAclAssociationRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RequestSpotInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcClassicLinkRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkInterfacesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeLaunchTemplateVersionsRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachNetworkInterfaceRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyNetworkInterfaceAttributeRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateRouteTableRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateKeyPairRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachClassicLinkVpcRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeEgressOnlyInternetGatewaysRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelReservedInstancesListingRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateSubnetCidrBlockRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.MonitorInstancesRequest"), true);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpnGatewayRequest"), true);
	}
	
	public void testModelsWithFalseResults() {
		Collection<String> models = kindModels.values();
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifySnapshotAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotDatafeedSubscriptionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyHostsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSnapshotsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNatGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointConnectionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetInstanceAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.PurchaseReservedInstancesOfferingRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetSnapshotAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RevokeSecurityGroupEgressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotPriceHistoryRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcPeeringConnectionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeHostsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateDefaultVpcRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.PurchaseScheduledInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeIdentityIdFormatRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CopyFpgaImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteFlowLogsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateDefaultSubnetRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateReservedInstancesListingRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSecurityGroupReferencesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeDhcpOptionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachVolumeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcEndpointServiceConfigurationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyReservedInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AllocateHostsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkInterfaceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetConsoleScreenshotRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssignPrivateIpAddressesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSnapshotRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcPeeringConnectionOptionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSecurityGroupRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointServicePermissionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AllocateAddressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetFpgaImageAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteFpgaImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumeAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ConfirmProductInstanceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteInternetGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImportSnapshotTasksRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstanceCreditSpecificationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReportInstanceStatusRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RevokeSecurityGroupIngressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVpcClassicLinkRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpnConnectionRouteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifySubnetAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelSpotFleetRequestsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeIdFormatRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetPasswordDataRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisableVpcClassicLinkRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVolumeAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSubnetsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateEgressOnlyInternetGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeFlowLogsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateDhcpOptionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcEndpointConnectionNotificationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RunInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeFpgaImagesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateLaunchTemplateVersionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcPeeringConnectionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointServicePermissionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelSpotInstanceRequestsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeHostReservationOfferingsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointConnectionNotificationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateDhcpOptionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceNetworkAclEntryRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeStaleSecurityGroupsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpnConnectionRouteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcClassicLinkDnsSupportRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UpdateSecurityGroupRuleDescriptionsEgressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyInstanceCreditSpecificationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RunScheduledInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceRouteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNatGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribePlacementGroupsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSpotDatafeedSubscriptionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesOfferingsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachVpnGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelBundleTaskRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisableVpcClassicLinkDnsSupportRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotFleetInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeFpgaImageAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UpdateSecurityGroupRuleDescriptionsIngressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceIamInstanceProfileAssociationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RebootInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateIamInstanceProfileRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAggregateIdFormatRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachClassicLinkVpcRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyFpgaImageAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetReservedInstancesExchangeQuoteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.MoveAddressToVpcRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAddressesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.StartInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSubnetRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateAddressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteLaunchTemplateVersionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RestoreAddressToClassicRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AcceptVpcEndpointConnectionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeScheduledInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeIamInstanceProfileAssociationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportInstanceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteRouteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeElasticGpusRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.BundleInstanceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeletePlacementGroupRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateVpcCidrBlockRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisableVgwRoutePropagationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkAclEntryRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteCustomerGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AuthorizeSecurityGroupIngressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateFlowLogsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkInterfaceAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeConversionTasksRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeCustomerGatewaysRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotFleetRequestsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifySpotFleetRequestRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkInterfacePermissionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumesModificationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachInternetGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RequestSpotFleetRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.StopInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeExportTasksRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateRouteTableRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateAddressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesListingsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateCustomerGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeTagsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteEgressOnlyInternetGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteDhcpOptionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImagesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AuthorizeSecurityGroupEgressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RejectVpcEndpointConnectionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcPeeringConnectionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointServiceConfigurationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReleaseAddressRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetNetworkInterfaceAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CopyImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeHostReservationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkAclRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateTagsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSnapshotRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportVolumeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteKeyPairRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImageAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcTenancyRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpnGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UnassignPrivateIpAddressesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeImportImageTasksRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateVpcCidrBlockRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportKeyPairRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AcceptVpcPeeringConnectionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteLaunchTemplateRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpnConnectionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcEndpointRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelImportTaskRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstanceAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelConversionTaskRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotFleetRequestHistoryRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyImageAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInstanceStatusRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcEndpointRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNatGatewaysRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVolumeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ResetImageAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateIamInstanceProfileRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpnConnectionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RejectVpcPeeringConnectionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpnConnectionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachVpnGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateSecurityGroupRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteTagsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReleaseHostsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVolumeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateLaunchTemplateRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyLaunchTemplateRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceRouteTableAssociationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.PurchaseHostReservationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkInterfacePermissionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyVpcAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSpotDatafeedSubscriptionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpcEndpointConnectionNotificationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteSubnetRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CopySnapshotRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointServiceConfigurationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVolumeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeLaunchTemplatesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointServicesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.TerminateInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAvailabilityZonesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkAclsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeAccountAttributesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribePrincipalIdFormatRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkAclRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVgwRoutePropagationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetConsoleOutputRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcEndpointConnectionNotificationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeRouteTablesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelExportTaskRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeKeyPairsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AcceptReservedInstancesExchangeQuoteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UnmonitorInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateRouteTableRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkAclEntryRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateFpgaImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssignIpv6AddressesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreatePlacementGroupRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeregisterImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcEndpointsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.UnassignIpv6AddressesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetLaunchTemplateDataRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSpotInstanceRequestsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteVpcEndpointServiceConfigurationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachNetworkInterfaceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeInternetGatewaysRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateRouteRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyIdentityIdFormatRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVolumeStatusRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVolumeIORequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyIdFormatRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateInstanceExportTaskRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteRouteTableRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribePrefixListsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.GetHostReservationPurchasePreviewRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachInternetGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeReservedInstancesModificationsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RegisterImageRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateInternetGatewayRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyInstancePlacementRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeRegionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeSnapshotAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AssociateSubnetCidrBlockRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeClassicLinkInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeMovingAddressesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeBundleTasksRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeScheduledInstanceAvailabilityRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ImportSnapshotRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateNetworkInterfaceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachVolumeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpnGatewaysRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DeleteNetworkInterfacePermissionRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.EnableVpcClassicLinkDnsSupportRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ReplaceNetworkAclAssociationRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.RequestSpotInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeVpcClassicLinkRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeNetworkInterfacesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeLaunchTemplateVersionsRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DetachNetworkInterfaceRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.ModifyNetworkInterfaceAttributeRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateRouteTableRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateKeyPairRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.AttachClassicLinkVpcRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DescribeEgressOnlyInternetGatewaysRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CancelReservedInstancesListingRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.DisassociateSubnetCidrBlockRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.MonitorInstancesRequestFalse"), false);
		Assert.assertEquals(models.contains("com.amazonaws.services.ec2.model.CreateVpnGatewayRequestFalse"), false);
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		AmazonEC2KindModelsAnalyzer ec2 = new AmazonEC2KindModelsAnalyzer();
		ModelsUtils.showAllModels("Amazon EC2", ec2.getKindModels());
		ModelsUtils.testModelsWithTrueResults(ec2.getKindModels().values());
		ModelsUtils.testModelsWithFalseResults(ec2.getKindModels().values());
	}

}
